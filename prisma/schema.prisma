generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/hotmeal"
}

model User {
  id           String       @id @default(uuid())
  phoneNumber  String       @unique
  name         String?
  isAdmin      Boolean      @default(false)
  isDriver     Boolean      @default(false)
  referralCode String?      @unique
  referredBy   String? // referral code of inviter
  addresses    Address[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Order        Order[]
  UserCoupon   UserCoupon[]
  Driver       Driver?
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  label     String // e.g., "Home", "Work"
  address   String
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())

  user  User    @relation(fields: [userId], references: [id])
  Order Order[]
}

model Branch {
  id        String   @id @default(uuid())
  name      String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories Category[]
  menuItems  MenuItem[]
  orders     Order[]
}

model Category {
  id        String     @id @default(uuid())
  name      String
  branchId  String
  menuItems MenuItem[] // ➤ Relation TO MenuItem
  createdAt DateTime   @default(now())

  branch Branch @relation(fields: [branchId], references: [id])
}

model MenuItem {
  id           String  @id @default(uuid())
  name         String
  description  String?
  imageUrl     String?
  isVeg        Boolean
  isAvailable  Boolean @default(true)
  priceOptions Json
  categoryId   String
  branchId     String

  category Category @relation(fields: [categoryId], references: [id]) // ➤ Back-reference
  branch   Branch   @relation(fields: [branchId], references: [id])
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  branchId    String
  addressId   String
  items       Json // e.g., [{ itemId, name, price, variant, quantity }]
  totalAmount Float
  status      OrderStatus @default(PENDING)
  notes       String?
  placedAt    DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  branch  Branch  @relation(fields: [branchId], references: [id])
  address Address @relation(fields: [addressId], references: [id])

  cancelledBy       String?  // "ADMIN" | "USER" | "DRIVER"
  cancellationReason String?
  driverId String? // assigned later  
  driver   Driver? @relation(fields: [driverId], references: [id])
  Coupon   Coupon? @relation(fields: [couponId], references: [id])
  couponId String?
}

enum OrderStatus {
  PENDING
  ASSIGNED
  ACCEPTED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model Coupon {
  id            String        @id @default(uuid())
  code          String        @unique
  description   String?
  discountType  DiscountType
  percentage    Float? // only for percentage type
  maxDiscount   Float? // optional cap
  freeDelivery  Boolean? // only for free delivery type
  minOrderValue Float?
  perUserLimit  Float?
  validFrom     DateTime
  validUntil    DateTime
  usageLimit    Int
  usageCount    Int           @default(0)
  targetSegment TargetSegment // enum
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orders        Order[] // Relation to orders
  UserCoupon    UserCoupon[]
}

enum DiscountType {
  PERCENTAGE
  FREE_DELIVERY
}

enum TargetSegment {
  ALL_USERS
  NEW_USERS
}

model UserCoupon {
  id         String   @id @default(uuid())
  userId     String
  couponId   String
  usageCount Int      @default(1)
  createdAt  DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  coupon Coupon @relation(fields: [couponId], references: [id])

  @@unique([userId, couponId]) // One row per user-coupon combo
}

model Driver {
  id             String       @id @default(uuid())
  name           String
  phoneNumber    String       @unique
  userId         String       @unique
  user           User         @relation(fields: [userId], references: [id])
  vehicleNumber  String?
  vehicleType    String?
  licenseNumber  String?
  isAvailable    Boolean      @default(true)
  status         DriverStatus @default(IDLE)
  currentOrderId String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Order          Order[]
}

enum DriverStatus {
  IDLE
  ASSIGNED
  ON_DELIVERY
  OFFLINE
}
